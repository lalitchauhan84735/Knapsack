
#include <bits/stdc++.h>
using namespace std;
  

int max(int a, int b) 
{  
    return (a > b) ? a : b;  
} 
  
int knapSack(int M, int wt[], int val[], int n) 
{ 
    int K[n + 1][M + 1]; 
  
    
    for (int i = 0; i <= n; i++)  
    { 
        for (int j = 0; j <= M; j++)  
        { 
            if (i == 0 || j == 0) 
                K[i][j] = 0; 
            else if (wt[i] <= j) 
                K[i][j] = max(K[i - 1][j], val[i] 
                          + K[i - 1][j - wt[i]]); 
            else
                K[i][j] = K[i - 1][j]; 
        } 
    } 
  
    return K[n][M]; 
} 

int main() 
{ 
    int val[] = { 0, 3, 4, 5, 6 };
    int wt[] = { 0, 2, 3, 4, 5 }; 
    int M = 8; 
    int n = sizeof(val) / sizeof(val[0]); 
    cout<< knapSack(M, wt, val, n); 
    return 0; 
}















class Solution {
  public:
  int search(vector<int>& nums, int target) {
    int pivot, left = 0, right = nums.size() - 1;
    while (left <= right) {
      pivot = left + (right - left) / 2;
      if (nums[pivot] == target) return pivot;
      if (target < nums[pivot]) right = pivot - 1;
      else left = pivot + 1;
    }
    return -1;
    }
    };
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    #include <bits/stdc++.h>
using namespace std;
void print_vector(vector<int> v){
   cout << "[";
   for(int i = 0; i<v.size(); i++){
      cout << v[i] << ", ";
   }
   cout << "]"<<endl;
}
class Solution {
   public:
      vector<int> sumZero(int n) {
         vector <int> ans(n);
         int x = 0;
         for(int i = 0; i < n - 1; i++){
            ans[i] = (i + 1);
            x += (i + 1);
         }
         ans[n - 1] = -x;
         return ans;
      }
};
main(){
   Solution ob;
   print_vector(ob.sumZero(10)) ;
}
